ENT.Type = "anim"
ENT.DLightController = true
ENT.RenderGroup = RENDERGROUP_TRANSLUCENT

ENT.Initialize = =>
    @DrawShadow( false )

do

    :GetNW2Var = FindMetaTable( "Entity" )

    ENT.GetEnabled = =>
        return GetNW2Var( @, "enabled", @__enabled or false )

    ENT.GetSprite = =>
        return GetNW2Var( @, "sprite", @__sprite or "" )

    ENT.GetRed = =>
        return GetNW2Var( @, "red", @__red or 255 )

    ENT.GetGreen = =>
        return GetNW2Var( @, "green", @__green or 255 )

    ENT.GetBlue = =>
        return GetNW2Var( @, "blue", @__blue or 255 )

    ENT.GetBrightness = =>
        return GetNW2Var( @, "brightness", @__brightness or 1 )

    ENT.GetRadius = =>
        return GetNW2Var( @, "radius", @__radius or 256 )

    -- https://developer.valvesoftware.com/wiki/Light_dynamic#Appearances
    ENT.GetStyle = =>
        return GetNW2Var( @, "style", @__style or 0 )

    ENT.GetNoModel = =>
        return GetNW2Var( @, "nomodel", @__nomodel or false )

    ENT.GetNoWorld = =>
        return GetNW2Var( @, "noworld", @__noworld or false )

    ENT.GetSpriteAlpha = =>
        return GetNW2Var( @, "sprite-alpha", @__sprite_alpha or 255 )

    ENT.GetSpriteScale = =>
        return GetNW2Var( @, "sprite-scale", @__sprite_scale or 1 )

    ENT.GetDecay = =>
        return GetNW2Var( @, "decay", @__decay or 1 )

do

    isvector = isvector
    IsColor = IsColor

    ENT.SetLightColor = ( r, g, b ) =>
        if IsColor( r )
            @SetRed( r.r )
            @SetGreen( r.g )
            @SetBlue( r.b )
            return

        if isvector( r )
            @SetRed( r[ 1 ] * 255 )
            @SetGreen( r[ 2 ] * 255 )
            @SetBlue( r[ 3 ] * 255 )
            return

        @SetRed( r )
        @SetGreen( g )
        @SetBlue( b )

do

    isnumber = isnumber
    CurTime = CurTime
    inf = 1 / 0

    ENT.GetLifetime = =>
        if @DeathTime
            return @DeathTime - CurTime!

        return inf

    ENT.SetLifetime = ( time ) =>
        if isnumber( time )
            @DeathTime = CurTime! + time
            return

        @DeathTime = nil

    ENT.IsDeathTime = =>
        if @DeathTime == nil
            return false

        return CurTime! > @DeathTime
